/* Auto-generated by genmsg_cpp for file /home/yisleyici/wam_workspace/ros_leap/leap_wam_controller/srv/LeapGoalPose.srv */
#ifndef LEAP_WAM_CONTROLLER_SERVICE_LEAPGOALPOSE_H
#define LEAP_WAM_CONTROLLER_SERVICE_LEAPGOALPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"



namespace leap_wam_controller
{
template <class ContainerAllocator>
struct LeapGoalPoseRequest_ {
  typedef LeapGoalPoseRequest_<ContainerAllocator> Type;

  LeapGoalPoseRequest_()
  : pose()
  {
  }

  LeapGoalPoseRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LeapGoalPoseRequest
typedef  ::leap_wam_controller::LeapGoalPoseRequest_<std::allocator<void> > LeapGoalPoseRequest;

typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseRequest> LeapGoalPoseRequestPtr;
typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseRequest const> LeapGoalPoseRequestConstPtr;



template <class ContainerAllocator>
struct LeapGoalPoseResponse_ {
  typedef LeapGoalPoseResponse_<ContainerAllocator> Type;

  LeapGoalPoseResponse_()
  : result(false)
  {
  }

  LeapGoalPoseResponse_(const ContainerAllocator& _alloc)
  : result(false)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;


  typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LeapGoalPoseResponse
typedef  ::leap_wam_controller::LeapGoalPoseResponse_<std::allocator<void> > LeapGoalPoseResponse;

typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseResponse> LeapGoalPoseResponsePtr;
typedef boost::shared_ptr< ::leap_wam_controller::LeapGoalPoseResponse const> LeapGoalPoseResponseConstPtr;


struct LeapGoalPose
{

typedef LeapGoalPoseRequest Request;
typedef LeapGoalPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct LeapGoalPose
} // namespace leap_wam_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f192399f711a48924df9a394d37edd67";
  }

  static const char* value(const  ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf192399f711a4892ULL;
  static const uint64_t static_value2 = 0x4df9a394d37edd67ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "leap_wam_controller/LeapGoalPoseRequest";
  }

  static const char* value(const  ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose pose\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb13ac1f1354ccecb7941ee8fa2192e8";
  }

  static const char* value(const  ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb13ac1f1354ccecULL;
  static const uint64_t static_value2 = 0xb7941ee8fa2192e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "leap_wam_controller/LeapGoalPoseResponse";
  }

  static const char* value(const  ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool result\n\
\n\
";
  }

  static const char* value(const  ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LeapGoalPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LeapGoalPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<leap_wam_controller::LeapGoalPose> {
  static const char* value() 
  {
    return "1d3c815fa4fd2c21ffd36bbca1e530bf";
  }

  static const char* value(const leap_wam_controller::LeapGoalPose&) { return value(); } 
};

template<>
struct DataType<leap_wam_controller::LeapGoalPose> {
  static const char* value() 
  {
    return "leap_wam_controller/LeapGoalPose";
  }

  static const char* value(const leap_wam_controller::LeapGoalPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1d3c815fa4fd2c21ffd36bbca1e530bf";
  }

  static const char* value(const leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "leap_wam_controller/LeapGoalPose";
  }

  static const char* value(const leap_wam_controller::LeapGoalPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1d3c815fa4fd2c21ffd36bbca1e530bf";
  }

  static const char* value(const leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "leap_wam_controller/LeapGoalPose";
  }

  static const char* value(const leap_wam_controller::LeapGoalPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LEAP_WAM_CONTROLLER_SERVICE_LEAPGOALPOSE_H

